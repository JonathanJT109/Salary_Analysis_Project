shiny::runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
rnorm(4, 4, 1)
rpois(4, 1)
rpois(4, 4)
runif(4)
diceGameSim <- function(reps = 10000){
possibilities <- 6
sum <- 0
for(i in 1:reps){
trial <- sample(1:possibilities, 1)
if(trial < 3) sum <- sum - 1
if(trial == 6) sum <- sum + 3
}
return(sum / reps)
}
sprintf("The expected value of the game with 10000 reps is: %f", diceGameSim())
n <- 100
possibilities <- 6
sum <- 0
for(i in 1:n){
if(sample(1:possibilities, 1) %% 2 == 0){
sum <- sum + 1
}
}
sprintf("The fraction of the rolls that resulted in an even number is: %d/%d", sum, n)
n <- 100
possibilities <- 6
sum <- 0
for(i in 1:n){
if(sample(1:possibilities, 1) %% 2 == 0){
sum <- sum + 1
}
}
sprintf("The fraction of the rolls that resulted in an even number is: %d/%d", sum, n)
6*12
pnorm(72, mean=70, sd=3)
probability <- pnorm(72, mean=70, sd=3)
1 - probability
dbinom(2, size=3, prob=2/3)
dbinom(2, size=3, prob=2/3)
dbinom(2, size=3, prob=2/3)
dbinom(2, 3, 2/3)
f <- dbinom(2, size, prob)
4/9
pbinom(1, 2, 1/3)
qbinom(0.05, 3, 1/2)
qbinom(0.05, 3, 1/2)
pbinom(2, 10, 1/6)
pbinom(2, 10, 1/6)
sum(dbinom(0:2, 10, 1/6))
dbinom(4, 10, 0.3)
ppois(2, 7)
qunif(0.9, 30, 50)
qnorm(0.99, 68, 3)
rpois(15, 8)
# Set up parameters
num_sims <- 1000000  # Number of simulations
num_faces <- 6       # Number of faces on the die
num_rolls <- 6       # Number of rolls
# Initialize counter for successful simulations
success_count <- 0
# Loop through simulations
for (i in 1:num_sims) {
# Simulate rolling a die num_rolls times
rolls <- sample(num_faces, num_rolls, replace = TRUE)
# Check if all six faces appear exactly once
if (length(unique(rolls)) == num_faces) {
success_count <- success_count + 1
}
}
# Calculate estimated probability
prob_estimate <- success_count / num_sims
# Print results
cat("Estimated probability:", prob_estimate)
n <- 1000000
poss <- 6
num_rolls <- 6
success_count <- 0
for (i in 1:n) {
rolls <- sample(poss, num_rolls, replace = TRUE)
if (length(unique(rolls)) == poss) {
success_count <- success_count + 1
}
}
prob <- success_count / n
cat("Estimated probability:", prob)
n <- 500000
num_rolls <- 5
target_sequence <- c(1, 1, 1)
success_count <- 0
for (i in 1:n) {
rolls <- sample(1:6, num_rolls, replace = TRUE)
# Check if target sequence is present in the rolls
if (any(rollapply(rolls, width = length(target_sequence), FUN = function(x) all(x == target_sequence)))) {
success_count <- success_count + 1
}
}
n <- 500000
num_rolls <- 5
target_sequence <- c(1, 1, 1)
success_count <- 0
for (i in 1:n) {
rolls <- sample(1:6, num_rolls, replace = TRUE)
if (any(zoo::rollapply(rolls, length(target), identical, target))) {
success_count <- success_count + 1
}
}
n <- 500000
num_rolls <- 5
target_sequence <- c(1, 1, 1)
success_count <- 0
for (i in 1:n) {
rolls <- sample(1:6, num_rolls, replace = TRUE)
if (any(apply(embed(rolls, length(target)), 1, function(x) all(x == target)))) {
success_count <- success_count + 1
}
}
n <- 500000
num_rolls <- 5
target <- c(1, 1, 1)
success_count <- 0
for (i in 1:n) {
rolls <- sample(1:6, num_rolls, replace = TRUE)
if (any(apply(embed(num_rolls, length(target)), 1, function(x) all(x == target)))) {
success_count <- success_count + 1
}
}
n <- 500000
num_rolls <- 5
target <- c(1, 1, 1)
success_count <- 0
for (i in 1:n) {
rolls <- sample(1:6, num_rolls, replace = TRUE)
if (any(apply(embed(rolls, length(target)), 1, function(x) all(x == target)))) {
success_count <- success_count + 1
}
}
prob <- success_count / n
cat("Estimated probability:", prob)
shiny::runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
runApp('Desktop/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
shiny::runApp('Library/CloudStorage/OneDrive-UniversityofIndianapolis/College/Spring 2023/MATH 225/Project')
runApp('Library/CloudStorage/OneDrive-UniversityofIndianapolis/College/Spring 2023/MATH 225/Project')
major_data <- read.csv("data/degrees-that-pay-back.csv")
setwd("~/Library/CloudStorage/OneDrive-UniversityofIndianapolis/College/Spring 2023/MATH 225/Project")
major_data <- read.csv("data/degrees-that-pay-back.csv")
region_data <- read.csv("data/salaries-by-region.csv")
college_data <- read.csv("data/salaries-by-college-type.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Library/CloudStorage/OneDrive-UniversityofIndianapolis/College/Spring 2023/MATH 225/Project")
major_data <- read.csv("data/degrees-that-pay-back.csv")
major_data$Starting.Median.Salary <- as.numeric(major_data$Starting.Median.Salary)
major_data
major_data <- read.csv("data/degrees-that-pay-back.csv")
major_data
major_data <- major_data %>%
mutate(numeric_value = parse_number(Starting.Median.Salary))
major_data
major_data <- read.csv("data/degrees-that-pay-back.csv")
major_data <- major_data %>%
mutate(numeric_value = parse_number(Starting.Median.Salary))
major_data
major_data <- read.csv("data/degrees-that-pay-back.csv")
major_data <- major_data %>%
mutate(Starting.Median.Salary = parse_number(Starting.Median.Salary))
major_data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

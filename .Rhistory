creature.data <- data.frame(friendly, diet, waking.hours, row.names = creatures)
creature.data
creatures[creature.data$waking.hours < 12 & !creature.data$friendly]
subset(creature.data, waking.hours > 12, select = c(row.names(), diet))
subset(creature.data, waking.hours > 12, select = c(1, 3))
subset(creature.data, waking.hours > 12, select = c(3))
# (a)
creature.data[1,3]
# (a)
creature.data[1,3]
creature.data[dog, "waking.hours"]
# (a)
creature.data[1,3]
creature.data["dog", "waking.hours"]
# (a)
creature.data[1,3]
creature.data["dog", "waking.hours"]
# (b)
creature.data[,3]
creature.data[,"waking.hours"]
# (a)
creature.data[1,3]
creature.data["dog", "waking.hours"]
# (b)
creature.data[,3]
creature.data[,"waking.hours"]
# (c)
creature.dogs.armadillos <- creature.data[c("dogs", "armadillo"),]
creature.dogs.armadillos
creature.dogs.armadillos <- creature.data[c(1,3),]
# (a)
creature.data[1,3]
creature.data["dog", "waking.hours"]
# (b)
creature.data[,3]
creature.data[,"waking.hours"]
# (c)
creature.dogs.armadillos <- creature.data[c("dog", "armadillo"),]
creature.dogs.armadillos
creature.dogs.armadillos <- creature.data[c(1,3),]
creature.dogs.armadillos
# (a)
creature.data[1,3]
creature.data["dog", "waking.hours"]
# (b)
creature.data[,3]
creature.data[,"waking.hours"]
# (c)
creature.dogs.armadillos <- creature.data[c("dog", "armadillo"),]
creature.dogs.armadillos
creature.dogs.armadillos <- creature.data[c(1,3),]
creature.dogs.armadillos
# (d)
creature.friendly <- subset(creature.data, friendly == TRUE)
creature.friendly
a <- data.frame(1:4, c("a", "b", "c", "d"), c(-1, 5, 2, 5))
a
a <- data.frame(1:4, c("a", "b", "c", "d"), c(-1, 5, 2, 5), row.names = c("index", "letters", "numbers"))
a <- data.frame(index = 1:4, letters = c("a", "b", "c", "d"), numbers = c(-1, 5, 2, 5))
a
a <- data.frame(index = 1:4, letters = 5:8, numbers = c(-1, 5, 2, 5))
a
a[a == -1] <- NA
a
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2, ncol = 3)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
# apply functions and summarize results
result_table <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), class),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
w = data.frame(1:4, month.abb[1:4], c("Paul", "John", "George", "Ringo"))
w$y = NULL
w[c("x", "z")]
w = data.frame(x = 1:4, y = month.abb[1:4], z = c("Paul", "John", "George", "Ringo"))
w$y = NULL
w[c("x", "z")]
w = data.frame(x = 1:4, y = month.abb[1:4], z = c("Paul", "John", "George", "Ringo"))
w$y = NULL
w
w[c("x", "z")]
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), class),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Class = sapply(list(v, m, a, l, d), class),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), class),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), function(x) class(x)[1]),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# print results
print(results)
### 16.7
```{r}
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), function(x) class(x)[1]),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# print results
print(results)
### 16.7
w = data.frame(x = 1:4, y = month.abb[1:4], z = c("Paul", "John", "George", "Ringo"))
w$y = NULL
w
w[c("x", "z")]
# create objects
v <- c(1, 2, 3)
m <- matrix(1:6, nrow = 2)
a <- array(1:24, dim = c(2, 3, 4))
l <- list(a = 1, b = "two", c = TRUE)
d <- data.frame(x = 1:3, y = c("a", "b", "c"))
# apply functions to objects
results <- data.frame(
Object = c("v", "m", "a", "l", "d"),
Class = sapply(list(v, m, a, l, d), function(x) class(x)[1]),
Typeof = sapply(list(v, m, a, l, d), typeof),
Mode = sapply(list(v, m, a, l, d), mode)
)
# print results
print(results)
library(datasets)
library(help = "datasets")
help(str)
help("summary")
library(datasets)
library(help = "datasets")
# a,
attach(iris)
data(iris)
# b.
names(iris)
nrow(iris)
ncol(iris)
head(iris)
tail(iris)
str(iris)
summary(iris)
Var = function(x, n){}
Var = function(x, n){
variance = sum((x-mean(x))^2/(n-1))
return(variance)
}
Var(rep(1,10))
rep(1,10)
class(summary(iris))
class(dataframe(1:4, 4:8))
class(data.frame(1:4, 4:8))
class(data.frame(1:4, 4:7))
x <- summary(iris)$Species
x <- summary(iris)["Species"]
x
summary(iris)
x <- summary(iris)$coefficients[, "Species"]
number.species <- table(iris$Species)
library(datasets)
library(help = "datasets")
# a,
attach(iris)
data(iris)
# b.
names(iris)
nrow(iris)
ncol(iris)
head(iris)
tail(iris)
str(iris)
summary(iris)
number.species <- table(iris$Species)
number.species
x = 0
x + 1
x
x += 1
x = x + 1
x
class(iris)
# d.
number.flowers.petal.less.2 <- nrow(iris[iris$Petal.Length <= 2,])
number.flowers.petal.less.2
# e.
mean.flower.petal.length <- mean(iris[iris$Petal.Length,])
# e.
mean.flower.petal.length <- mean(iris$Petal.Length)
mean.flower.petal.length
# f.
iris[iris$Petal.Length, 1:5] <- mean.flower.petal.length
head(iris)
# f.
iris[1:5, iris$Petal.Length] <- mean.flower.petal.length
# f.
iris$Petal.Length[1:5, ] <- mean.flower.petal.length
# f.
iris$Petal.Length[1:5] <- mean.flower.petal.length
head(iris)
library(datasets)
library(help = "datasets")
# a,
attach(iris)
data(iris)
# b.
names(iris)
nrow(iris)
ncol(iris)
head(iris)
tail(iris)
str(iris)
summary(iris)
# c.
number.species <- table(iris$Species)
number.species
# d.
number.flowers.petal.less.2 <- nrow(iris[iris$Petal.Length <= 2,])
number.flowers.petal.less.2
# e.
mean.flower.petal.length <- mean(iris$Petal.Length)
mean.flower.petal.length
# f.
iris$Petal.Length[1:5] <- mean.flower.petal.length
head(iris)
dim(MBA_admission.csv)
dim("MBA_admission.csv"")
exit
dim("MBA_admission.csv")
dim("MBA_admission.csv")
names("MBA_admission.csv")
dim("MBA_admission.csv"")
fjdakl
fdjask8902
)
("")
data <- read.csv("MBA_admission.csv")
library(readr)
MBA_admission <- read_csv("C:/Users/jonat/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Labs/Lab 5/MBA_admission.csv")
View(MBA_admission)
data <- read.csv("MBA_admission.csv")
head(data)
data <- read.csv("MBA_admission.csv")
dim(data)
nrow(data)
ncol(data)
head(data)
tail(data)
str(data)
summary(data)
# b.
ncol(data)
# b.
sprintf("Number of different features %d", ncol(data))
# c.
sprintf("Number of data points: %d", nrow(data))
sprintf("Number of different features: %d", ncol(data))
# c.
sprintf("Number of data points: %d", nrow(data))
summary(data)
# d.
sprintf("Number of different \"Decisions\": %d", length(unique(data$Decision)))
# d.
sprintf("Number of different "Decisions": %d", length(unique(data$Decision)))
# d.
sprintf("Number of different Decisions: %d", length(unique(data$Decision)))
# e.
MBA.Admitted <- data[, data$Decision == "Admitted"]
MBA.Admitted
# e.
MBA.Admitted <- data[, data$Decision == "admit"]
# e.
MBA.Admitted <- data[data$Decision == "admit"]
# e.
MBA.Admitted <- data[data$Decision == "admit",]
MBA.Admitted
# e.i.
sprintf("Mean of GPA scored for MBA.Admitted: %d", mean(MBA.Admitted$GPA))
# e.i.
sprintf("Mean of GPA scored for MBA.Admitted: %lf", mean(MBA.Admitted$GPA))
# e.i.
sprintf("Mean of GPA scored for MBA.Admitted: %f", mean(MBA.Admitted$GPA))
sprintf("Mean of GPA scored for MBA.Admitted: %f", mean(MBA.Admitted$GPA))
sprintf("Mean of GMAT scored for MBA.Admitted: %f", mean(MBA.Admitted$GMAT))
MBA.NotAdmitted <- data[data$Decision == "notadmit",]
MBA.NotAdmitted
sprintf("Mean of GPA scored for MBA.Admitted: %f", mean(MBA.NotAdmitted$GPA))
sprintf("Mean of GMAT scored for MBA.Admitted: %f", mean(MBA.NotAdmitted$GMAT))
# g.
sprintf("According to the analysis, I can conclude that a student should aim for a %.1f GPA or higher and a %1.f or higher if the sudent is applying for MBA", mean(MBA.Admitted$GPA), mean(MBA.Admitted$GMAT))
ST <- "NAME: James /COUNTRY: United Kingdom /EMAIL: 007@MI6.gov"
text <- split(ST, "/")
text
text <- str_split(ST, "/")
text <- strsplit(ST, "/")
text
fields <- sub(":", "", text)
fields
fields
fields <- sub(":.*", "", text)
fields
fields <- strsplit(text, "[:]")
fields <- strsplit(text, ":")
fields <- sub(":.*", "", text)
fields
ST <- "NAME: James /COUNTRY: United Kingdom /EMAIL: 007@MI6.gov"
text <- strsplit(ST, "/")
fields <- sub(":.*", "", text)
fields
text <- unlist(strsplit(ST, "/"))
fields <- sub(":.*", "", text)
fields
ST <- "NAME: James /COUNTRY: United Kingdom /EMAIL: 007@MI6.gov"
text <- unlist(strsplit(ST, " /"))
fields <- sub(":.*", "", text)
fields
values <- sub(".")
text
values <- sub(".*: ", "", text)
values
fields
INFO = function(str){
text <- unlist(strsplit(ST, " /"))
fields <- sub(":.*", "", text)
values <- sub(".*: ", "", text)
return(rbind(fields, values))
}
ST <- "NAME: James /COUNTRY: United Kingdom /EMAIL: 007@MI6.gov"
INFO(ST)
shiny::runApp('C:/Users/jonat/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
shiny::runApp('C:/Users/jonat/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project')
install.packages("shinydashboard")
setwd("C:/Users/jonat/OneDrive - University of Indianapolis/College/Spring 2023/MATH 225/Project")
shiny::runApp()
top_19
top_10
top_10 <- major_data %>%
arrange(desc(Percent.change.from.Starting.to.Mid.Career.Salary)) %>%
top_n(10)
View(major_general_page)
View(major_specific_page)
runApp()
runApp()
runApp()
major_data <- data1 %>%
select(-Percent.change.from.Starting.to.Mid.Career.Salary) %>%
mutate_at(vars(-Undergraduate.Major), ~ parse_number(.))
top_10 <- major_data %>%
arrange(desc(Percent.change.from.Starting.to.Mid.Career.Salary)) %>%
slice(1:10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("formattable")
library(formattable)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
# Example data
y_values <- c(5, 10, 15, 20, 25)
x_labels <- c("Label 1", "Label 2", "Label 3", "Label 4", "Label 5")
# Create a numeric sequence for x-axis values
x_values <- 1:length(y_values)
# Combine x and y values into a data frame
data <- data.frame(x = x_values, y = y_values)
# Fit a linear regression model
model <- lm(y ~ x, data = data)
# Generate predicted values from the model
predicted_values <- predict(model, newdata = data.frame(x = x_values))
# Create the ggplot plot
plot <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = predicted_values), color = "red") +
scale_x_continuous(labels = x_labels) +
labs(x = "X Axis Label", y = "Y Axis Label") +
theme_minimal()
# Display the plot
plot
library(ggplot2)
# Example data
y_values <- c(5, 13, 18, 45, 52)
x_labels <- c("Label 1", "Label 2", "Label 3", "Label 4", "Label 5")
# Create a numeric sequence for x-axis values
x_values <- 1:length(y_values)
# Combine x and y values into a data frame
data <- data.frame(x = x_values, y = y_values)
# Fit a linear regression model
model <- lm(y ~ x, data = data)
# Generate predicted values from the model
predicted_values <- predict(model, newdata = data.frame(x = x_values))
# Create the ggplot plot
plot <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = predicted_values), color = "red") +
scale_x_continuous(labels = x_labels) +
labs(x = "X Axis Label", y = "Y Axis Label") +
theme_minimal()
# Display the plot
plot
library(ggplot2)
# Example data
y_values <- c(5, 13, 18, 45, 22)
x_labels <- c("Label 1", "Label 2", "Label 3", "Label 4", "Label 5")
# Create a numeric sequence for x-axis values
x_values <- 1:length(y_values)
# Combine x and y values into a data frame
data <- data.frame(x = x_values, y = y_values)
# Fit a linear regression model
model <- lm(y ~ x, data = data)
# Generate predicted values from the model
predicted_values <- predict(model, newdata = data.frame(x = x_values))
# Create the ggplot plot
plot <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = predicted_values), color = "red") +
scale_x_continuous(labels = x_labels) +
labs(x = "X Axis Label", y = "Y Axis Label") +
theme_minimal()
# Display the plot
plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(major_data)
